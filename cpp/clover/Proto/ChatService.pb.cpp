// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ChatService.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ChatService.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* C2CS_EnterROOM_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2CS_EnterROOM_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2CS_LeaveROOM_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2CS_LeaveROOM_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2CS_UserMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2CS_UserMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* CS2C_UserMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CS2C_UserMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* CS2C_UnknowError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CS2C_UnknowError_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ChatService_2eproto() {
  protobuf_AddDesc_ChatService_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ChatService.proto");
  GOOGLE_CHECK(file != NULL);
  C2CS_EnterROOM_descriptor_ = file->message_type(0);
  static const int C2CS_EnterROOM_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2CS_EnterROOM, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2CS_EnterROOM, room_id_),
  };
  C2CS_EnterROOM_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2CS_EnterROOM_descriptor_,
      C2CS_EnterROOM::default_instance_,
      C2CS_EnterROOM_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2CS_EnterROOM, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2CS_EnterROOM, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2CS_EnterROOM));
  C2CS_LeaveROOM_descriptor_ = file->message_type(1);
  static const int C2CS_LeaveROOM_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2CS_LeaveROOM, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2CS_LeaveROOM, room_id_),
  };
  C2CS_LeaveROOM_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2CS_LeaveROOM_descriptor_,
      C2CS_LeaveROOM::default_instance_,
      C2CS_LeaveROOM_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2CS_LeaveROOM, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2CS_LeaveROOM, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2CS_LeaveROOM));
  C2CS_UserMessage_descriptor_ = file->message_type(2);
  static const int C2CS_UserMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2CS_UserMessage, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2CS_UserMessage, content_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2CS_UserMessage, playload_),
  };
  C2CS_UserMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2CS_UserMessage_descriptor_,
      C2CS_UserMessage::default_instance_,
      C2CS_UserMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2CS_UserMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2CS_UserMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2CS_UserMessage));
  CS2C_UserMessage_descriptor_ = file->message_type(3);
  static const int CS2C_UserMessage_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS2C_UserMessage, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS2C_UserMessage, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS2C_UserMessage, display_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS2C_UserMessage, datetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS2C_UserMessage, content_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS2C_UserMessage, playload_),
  };
  CS2C_UserMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CS2C_UserMessage_descriptor_,
      CS2C_UserMessage::default_instance_,
      CS2C_UserMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS2C_UserMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS2C_UserMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CS2C_UserMessage));
  CS2C_UnknowError_descriptor_ = file->message_type(4);
  static const int CS2C_UnknowError_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS2C_UnknowError, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS2C_UnknowError, message_),
  };
  CS2C_UnknowError_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CS2C_UnknowError_descriptor_,
      CS2C_UnknowError::default_instance_,
      CS2C_UnknowError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS2C_UnknowError, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS2C_UnknowError, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CS2C_UnknowError));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ChatService_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2CS_EnterROOM_descriptor_, &C2CS_EnterROOM::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2CS_LeaveROOM_descriptor_, &C2CS_LeaveROOM::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2CS_UserMessage_descriptor_, &C2CS_UserMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CS2C_UserMessage_descriptor_, &CS2C_UserMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CS2C_UnknowError_descriptor_, &CS2C_UnknowError::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ChatService_2eproto() {
  delete C2CS_EnterROOM::default_instance_;
  delete C2CS_EnterROOM_reflection_;
  delete C2CS_LeaveROOM::default_instance_;
  delete C2CS_LeaveROOM_reflection_;
  delete C2CS_UserMessage::default_instance_;
  delete C2CS_UserMessage_reflection_;
  delete CS2C_UserMessage::default_instance_;
  delete CS2C_UserMessage_reflection_;
  delete CS2C_UnknowError::default_instance_;
  delete CS2C_UnknowError_reflection_;
}

void protobuf_AddDesc_ChatService_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021ChatService.proto\022\002pb\"0\n\016C2CS_EnterROO"
    "M\022\r\n\005token\030\001 \002(\t\022\017\n\007room_id\030\002 \002(\r\"0\n\016C2C"
    "S_LeaveROOM\022\r\n\005token\030\001 \002(\t\022\017\n\007room_id\030\002 "
    "\002(\r\"H\n\020C2CS_UserMessage\022\014\n\004type\030\001 \002(\r\022\024\n"
    "\014content_type\030\002 \002(\r\022\020\n\010playload\030\003 \002(\t\"\201\001"
    "\n\020CS2C_UserMessage\022\014\n\004type\030\001 \002(\r\022\017\n\007user"
    "_id\030\002 \002(\r\022\024\n\014display_name\030\003 \002(\t\022\020\n\010datet"
    "ime\030\004 \002(\r\022\024\n\014content_type\030\005 \002(\r\022\020\n\010playl"
    "oad\030\006 \002(\t\"1\n\020CS2C_UnknowError\022\014\n\004code\030\001 "
    "\002(\r\022\017\n\007message\030\002 \002(\t", 380);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ChatService.proto", &protobuf_RegisterTypes);
  C2CS_EnterROOM::default_instance_ = new C2CS_EnterROOM();
  C2CS_LeaveROOM::default_instance_ = new C2CS_LeaveROOM();
  C2CS_UserMessage::default_instance_ = new C2CS_UserMessage();
  CS2C_UserMessage::default_instance_ = new CS2C_UserMessage();
  CS2C_UnknowError::default_instance_ = new CS2C_UnknowError();
  C2CS_EnterROOM::default_instance_->InitAsDefaultInstance();
  C2CS_LeaveROOM::default_instance_->InitAsDefaultInstance();
  C2CS_UserMessage::default_instance_->InitAsDefaultInstance();
  CS2C_UserMessage::default_instance_->InitAsDefaultInstance();
  CS2C_UnknowError::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ChatService_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ChatService_2eproto {
  StaticDescriptorInitializer_ChatService_2eproto() {
    protobuf_AddDesc_ChatService_2eproto();
  }
} static_descriptor_initializer_ChatService_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int C2CS_EnterROOM::kTokenFieldNumber;
const int C2CS_EnterROOM::kRoomIdFieldNumber;
#endif  // !_MSC_VER

C2CS_EnterROOM::C2CS_EnterROOM()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2CS_EnterROOM::InitAsDefaultInstance() {
}

C2CS_EnterROOM::C2CS_EnterROOM(const C2CS_EnterROOM& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2CS_EnterROOM::SharedCtor() {
  _cached_size_ = 0;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  room_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2CS_EnterROOM::~C2CS_EnterROOM() {
  SharedDtor();
}

void C2CS_EnterROOM::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void C2CS_EnterROOM::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2CS_EnterROOM::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2CS_EnterROOM_descriptor_;
}

const C2CS_EnterROOM& C2CS_EnterROOM::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChatService_2eproto();
  return *default_instance_;
}

C2CS_EnterROOM* C2CS_EnterROOM::default_instance_ = NULL;

C2CS_EnterROOM* C2CS_EnterROOM::New() const {
  return new C2CS_EnterROOM;
}

void C2CS_EnterROOM::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    room_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2CS_EnterROOM::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string token = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_room_id;
        break;
      }

      // required uint32 room_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2CS_EnterROOM::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->token(), output);
  }

  // required uint32 room_id = 2;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->room_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2CS_EnterROOM::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }

  // required uint32 room_id = 2;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->room_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2CS_EnterROOM::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string token = 1;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // required uint32 room_id = 2;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2CS_EnterROOM::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2CS_EnterROOM* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2CS_EnterROOM*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2CS_EnterROOM::MergeFrom(const C2CS_EnterROOM& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2CS_EnterROOM::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2CS_EnterROOM::CopyFrom(const C2CS_EnterROOM& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2CS_EnterROOM::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void C2CS_EnterROOM::Swap(C2CS_EnterROOM* other) {
  if (other != this) {
    std::swap(token_, other->token_);
    std::swap(room_id_, other->room_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2CS_EnterROOM::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2CS_EnterROOM_descriptor_;
  metadata.reflection = C2CS_EnterROOM_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2CS_LeaveROOM::kTokenFieldNumber;
const int C2CS_LeaveROOM::kRoomIdFieldNumber;
#endif  // !_MSC_VER

C2CS_LeaveROOM::C2CS_LeaveROOM()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2CS_LeaveROOM::InitAsDefaultInstance() {
}

C2CS_LeaveROOM::C2CS_LeaveROOM(const C2CS_LeaveROOM& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2CS_LeaveROOM::SharedCtor() {
  _cached_size_ = 0;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  room_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2CS_LeaveROOM::~C2CS_LeaveROOM() {
  SharedDtor();
}

void C2CS_LeaveROOM::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void C2CS_LeaveROOM::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2CS_LeaveROOM::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2CS_LeaveROOM_descriptor_;
}

const C2CS_LeaveROOM& C2CS_LeaveROOM::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChatService_2eproto();
  return *default_instance_;
}

C2CS_LeaveROOM* C2CS_LeaveROOM::default_instance_ = NULL;

C2CS_LeaveROOM* C2CS_LeaveROOM::New() const {
  return new C2CS_LeaveROOM;
}

void C2CS_LeaveROOM::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    room_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2CS_LeaveROOM::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string token = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_room_id;
        break;
      }

      // required uint32 room_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2CS_LeaveROOM::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->token(), output);
  }

  // required uint32 room_id = 2;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->room_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2CS_LeaveROOM::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }

  // required uint32 room_id = 2;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->room_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2CS_LeaveROOM::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string token = 1;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // required uint32 room_id = 2;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2CS_LeaveROOM::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2CS_LeaveROOM* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2CS_LeaveROOM*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2CS_LeaveROOM::MergeFrom(const C2CS_LeaveROOM& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2CS_LeaveROOM::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2CS_LeaveROOM::CopyFrom(const C2CS_LeaveROOM& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2CS_LeaveROOM::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void C2CS_LeaveROOM::Swap(C2CS_LeaveROOM* other) {
  if (other != this) {
    std::swap(token_, other->token_);
    std::swap(room_id_, other->room_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2CS_LeaveROOM::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2CS_LeaveROOM_descriptor_;
  metadata.reflection = C2CS_LeaveROOM_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2CS_UserMessage::kTypeFieldNumber;
const int C2CS_UserMessage::kContentTypeFieldNumber;
const int C2CS_UserMessage::kPlayloadFieldNumber;
#endif  // !_MSC_VER

C2CS_UserMessage::C2CS_UserMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2CS_UserMessage::InitAsDefaultInstance() {
}

C2CS_UserMessage::C2CS_UserMessage(const C2CS_UserMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2CS_UserMessage::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  content_type_ = 0u;
  playload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2CS_UserMessage::~C2CS_UserMessage() {
  SharedDtor();
}

void C2CS_UserMessage::SharedDtor() {
  if (playload_ != &::google::protobuf::internal::kEmptyString) {
    delete playload_;
  }
  if (this != default_instance_) {
  }
}

void C2CS_UserMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2CS_UserMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2CS_UserMessage_descriptor_;
}

const C2CS_UserMessage& C2CS_UserMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChatService_2eproto();
  return *default_instance_;
}

C2CS_UserMessage* C2CS_UserMessage::default_instance_ = NULL;

C2CS_UserMessage* C2CS_UserMessage::New() const {
  return new C2CS_UserMessage;
}

void C2CS_UserMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    content_type_ = 0u;
    if (has_playload()) {
      if (playload_ != &::google::protobuf::internal::kEmptyString) {
        playload_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2CS_UserMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_content_type;
        break;
      }

      // required uint32 content_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_content_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &content_type_)));
          set_has_content_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_playload;
        break;
      }

      // required string playload = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playload:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playload()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playload().data(), this->playload().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2CS_UserMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required uint32 content_type = 2;
  if (has_content_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->content_type(), output);
  }

  // required string playload = 3;
  if (has_playload()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playload().data(), this->playload().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->playload(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2CS_UserMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // required uint32 content_type = 2;
  if (has_content_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->content_type(), target);
  }

  // required string playload = 3;
  if (has_playload()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playload().data(), this->playload().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->playload(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2CS_UserMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 content_type = 2;
    if (has_content_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->content_type());
    }

    // required string playload = 3;
    if (has_playload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playload());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2CS_UserMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2CS_UserMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2CS_UserMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2CS_UserMessage::MergeFrom(const C2CS_UserMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_content_type()) {
      set_content_type(from.content_type());
    }
    if (from.has_playload()) {
      set_playload(from.playload());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2CS_UserMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2CS_UserMessage::CopyFrom(const C2CS_UserMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2CS_UserMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void C2CS_UserMessage::Swap(C2CS_UserMessage* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(content_type_, other->content_type_);
    std::swap(playload_, other->playload_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2CS_UserMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2CS_UserMessage_descriptor_;
  metadata.reflection = C2CS_UserMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CS2C_UserMessage::kTypeFieldNumber;
const int CS2C_UserMessage::kUserIdFieldNumber;
const int CS2C_UserMessage::kDisplayNameFieldNumber;
const int CS2C_UserMessage::kDatetimeFieldNumber;
const int CS2C_UserMessage::kContentTypeFieldNumber;
const int CS2C_UserMessage::kPlayloadFieldNumber;
#endif  // !_MSC_VER

CS2C_UserMessage::CS2C_UserMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CS2C_UserMessage::InitAsDefaultInstance() {
}

CS2C_UserMessage::CS2C_UserMessage(const CS2C_UserMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CS2C_UserMessage::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  user_id_ = 0u;
  display_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  datetime_ = 0u;
  content_type_ = 0u;
  playload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CS2C_UserMessage::~CS2C_UserMessage() {
  SharedDtor();
}

void CS2C_UserMessage::SharedDtor() {
  if (display_name_ != &::google::protobuf::internal::kEmptyString) {
    delete display_name_;
  }
  if (playload_ != &::google::protobuf::internal::kEmptyString) {
    delete playload_;
  }
  if (this != default_instance_) {
  }
}

void CS2C_UserMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS2C_UserMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CS2C_UserMessage_descriptor_;
}

const CS2C_UserMessage& CS2C_UserMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChatService_2eproto();
  return *default_instance_;
}

CS2C_UserMessage* CS2C_UserMessage::default_instance_ = NULL;

CS2C_UserMessage* CS2C_UserMessage::New() const {
  return new CS2C_UserMessage;
}

void CS2C_UserMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    user_id_ = 0u;
    if (has_display_name()) {
      if (display_name_ != &::google::protobuf::internal::kEmptyString) {
        display_name_->clear();
      }
    }
    datetime_ = 0u;
    content_type_ = 0u;
    if (has_playload()) {
      if (playload_ != &::google::protobuf::internal::kEmptyString) {
        playload_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CS2C_UserMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_display_name;
        break;
      }

      // required string display_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_display_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_display_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->display_name().data(), this->display_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_datetime;
        break;
      }

      // required uint32 datetime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_datetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &datetime_)));
          set_has_datetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_content_type;
        break;
      }

      // required uint32 content_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_content_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &content_type_)));
          set_has_content_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_playload;
        break;
      }

      // required string playload = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playload:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playload()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playload().data(), this->playload().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CS2C_UserMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // required string display_name = 3;
  if (has_display_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->display_name().data(), this->display_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->display_name(), output);
  }

  // required uint32 datetime = 4;
  if (has_datetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->datetime(), output);
  }

  // required uint32 content_type = 5;
  if (has_content_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->content_type(), output);
  }

  // required string playload = 6;
  if (has_playload()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playload().data(), this->playload().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->playload(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CS2C_UserMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->user_id(), target);
  }

  // required string display_name = 3;
  if (has_display_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->display_name().data(), this->display_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->display_name(), target);
  }

  // required uint32 datetime = 4;
  if (has_datetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->datetime(), target);
  }

  // required uint32 content_type = 5;
  if (has_content_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->content_type(), target);
  }

  // required string playload = 6;
  if (has_playload()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playload().data(), this->playload().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->playload(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CS2C_UserMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required string display_name = 3;
    if (has_display_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->display_name());
    }

    // required uint32 datetime = 4;
    if (has_datetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->datetime());
    }

    // required uint32 content_type = 5;
    if (has_content_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->content_type());
    }

    // required string playload = 6;
    if (has_playload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playload());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS2C_UserMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CS2C_UserMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CS2C_UserMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CS2C_UserMessage::MergeFrom(const CS2C_UserMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_display_name()) {
      set_display_name(from.display_name());
    }
    if (from.has_datetime()) {
      set_datetime(from.datetime());
    }
    if (from.has_content_type()) {
      set_content_type(from.content_type());
    }
    if (from.has_playload()) {
      set_playload(from.playload());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CS2C_UserMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS2C_UserMessage::CopyFrom(const CS2C_UserMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS2C_UserMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void CS2C_UserMessage::Swap(CS2C_UserMessage* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(user_id_, other->user_id_);
    std::swap(display_name_, other->display_name_);
    std::swap(datetime_, other->datetime_);
    std::swap(content_type_, other->content_type_);
    std::swap(playload_, other->playload_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CS2C_UserMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CS2C_UserMessage_descriptor_;
  metadata.reflection = CS2C_UserMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CS2C_UnknowError::kCodeFieldNumber;
const int CS2C_UnknowError::kMessageFieldNumber;
#endif  // !_MSC_VER

CS2C_UnknowError::CS2C_UnknowError()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CS2C_UnknowError::InitAsDefaultInstance() {
}

CS2C_UnknowError::CS2C_UnknowError(const CS2C_UnknowError& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CS2C_UnknowError::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0u;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CS2C_UnknowError::~CS2C_UnknowError() {
  SharedDtor();
}

void CS2C_UnknowError::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void CS2C_UnknowError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS2C_UnknowError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CS2C_UnknowError_descriptor_;
}

const CS2C_UnknowError& CS2C_UnknowError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChatService_2eproto();
  return *default_instance_;
}

CS2C_UnknowError* CS2C_UnknowError::default_instance_ = NULL;

CS2C_UnknowError* CS2C_UnknowError::New() const {
  return new CS2C_UnknowError;
}

void CS2C_UnknowError::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0u;
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CS2C_UnknowError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // required string message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CS2C_UnknowError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->code(), output);
  }

  // required string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CS2C_UnknowError::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->code(), target);
  }

  // required string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CS2C_UnknowError::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->code());
    }

    // required string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS2C_UnknowError::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CS2C_UnknowError* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CS2C_UnknowError*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CS2C_UnknowError::MergeFrom(const CS2C_UnknowError& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CS2C_UnknowError::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS2C_UnknowError::CopyFrom(const CS2C_UnknowError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS2C_UnknowError::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CS2C_UnknowError::Swap(CS2C_UnknowError* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CS2C_UnknowError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CS2C_UnknowError_descriptor_;
  metadata.reflection = CS2C_UnknowError_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
