// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ChatService.proto

#ifndef PROTOBUF_ChatService_2eproto__INCLUDED
#define PROTOBUF_ChatService_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ChatService_2eproto();
void protobuf_AssignDesc_ChatService_2eproto();
void protobuf_ShutdownFile_ChatService_2eproto();

class C2CS_EnterROOM;
class C2CS_LeaveROOM;
class C2CS_UserMessage;
class CS2C_UserMessage;
class CS2C_UnknowError;

// ===================================================================

class C2CS_EnterROOM : public ::google::protobuf::Message {
 public:
  C2CS_EnterROOM();
  virtual ~C2CS_EnterROOM();

  C2CS_EnterROOM(const C2CS_EnterROOM& from);

  inline C2CS_EnterROOM& operator=(const C2CS_EnterROOM& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2CS_EnterROOM& default_instance();

  void Swap(C2CS_EnterROOM* other);

  // implements Message ----------------------------------------------

  C2CS_EnterROOM* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2CS_EnterROOM& from);
  void MergeFrom(const C2CS_EnterROOM& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string token = 1;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 1;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // required uint32 room_id = 2;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 2;
  inline ::google::protobuf::uint32 room_id() const;
  inline void set_room_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.C2CS_EnterROOM)
 private:
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_room_id();
  inline void clear_has_room_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* token_;
  ::google::protobuf::uint32 room_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ChatService_2eproto();
  friend void protobuf_AssignDesc_ChatService_2eproto();
  friend void protobuf_ShutdownFile_ChatService_2eproto();

  void InitAsDefaultInstance();
  static C2CS_EnterROOM* default_instance_;
};
// -------------------------------------------------------------------

class C2CS_LeaveROOM : public ::google::protobuf::Message {
 public:
  C2CS_LeaveROOM();
  virtual ~C2CS_LeaveROOM();

  C2CS_LeaveROOM(const C2CS_LeaveROOM& from);

  inline C2CS_LeaveROOM& operator=(const C2CS_LeaveROOM& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2CS_LeaveROOM& default_instance();

  void Swap(C2CS_LeaveROOM* other);

  // implements Message ----------------------------------------------

  C2CS_LeaveROOM* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2CS_LeaveROOM& from);
  void MergeFrom(const C2CS_LeaveROOM& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string token = 1;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 1;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // required uint32 room_id = 2;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 2;
  inline ::google::protobuf::uint32 room_id() const;
  inline void set_room_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.C2CS_LeaveROOM)
 private:
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_room_id();
  inline void clear_has_room_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* token_;
  ::google::protobuf::uint32 room_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ChatService_2eproto();
  friend void protobuf_AssignDesc_ChatService_2eproto();
  friend void protobuf_ShutdownFile_ChatService_2eproto();

  void InitAsDefaultInstance();
  static C2CS_LeaveROOM* default_instance_;
};
// -------------------------------------------------------------------

class C2CS_UserMessage : public ::google::protobuf::Message {
 public:
  C2CS_UserMessage();
  virtual ~C2CS_UserMessage();

  C2CS_UserMessage(const C2CS_UserMessage& from);

  inline C2CS_UserMessage& operator=(const C2CS_UserMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2CS_UserMessage& default_instance();

  void Swap(C2CS_UserMessage* other);

  // implements Message ----------------------------------------------

  C2CS_UserMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2CS_UserMessage& from);
  void MergeFrom(const C2CS_UserMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // required uint32 content_type = 2;
  inline bool has_content_type() const;
  inline void clear_content_type();
  static const int kContentTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 content_type() const;
  inline void set_content_type(::google::protobuf::uint32 value);

  // required string playload = 3;
  inline bool has_playload() const;
  inline void clear_playload();
  static const int kPlayloadFieldNumber = 3;
  inline const ::std::string& playload() const;
  inline void set_playload(const ::std::string& value);
  inline void set_playload(const char* value);
  inline void set_playload(const char* value, size_t size);
  inline ::std::string* mutable_playload();
  inline ::std::string* release_playload();
  inline void set_allocated_playload(::std::string* playload);

  // @@protoc_insertion_point(class_scope:pb.C2CS_UserMessage)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_content_type();
  inline void clear_has_content_type();
  inline void set_has_playload();
  inline void clear_has_playload();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 content_type_;
  ::std::string* playload_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ChatService_2eproto();
  friend void protobuf_AssignDesc_ChatService_2eproto();
  friend void protobuf_ShutdownFile_ChatService_2eproto();

  void InitAsDefaultInstance();
  static C2CS_UserMessage* default_instance_;
};
// -------------------------------------------------------------------

class CS2C_UserMessage : public ::google::protobuf::Message {
 public:
  CS2C_UserMessage();
  virtual ~CS2C_UserMessage();

  CS2C_UserMessage(const CS2C_UserMessage& from);

  inline CS2C_UserMessage& operator=(const CS2C_UserMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CS2C_UserMessage& default_instance();

  void Swap(CS2C_UserMessage* other);

  // implements Message ----------------------------------------------

  CS2C_UserMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CS2C_UserMessage& from);
  void MergeFrom(const CS2C_UserMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // required uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required string display_name = 3;
  inline bool has_display_name() const;
  inline void clear_display_name();
  static const int kDisplayNameFieldNumber = 3;
  inline const ::std::string& display_name() const;
  inline void set_display_name(const ::std::string& value);
  inline void set_display_name(const char* value);
  inline void set_display_name(const char* value, size_t size);
  inline ::std::string* mutable_display_name();
  inline ::std::string* release_display_name();
  inline void set_allocated_display_name(::std::string* display_name);

  // required uint32 datetime = 4;
  inline bool has_datetime() const;
  inline void clear_datetime();
  static const int kDatetimeFieldNumber = 4;
  inline ::google::protobuf::uint32 datetime() const;
  inline void set_datetime(::google::protobuf::uint32 value);

  // required uint32 content_type = 5;
  inline bool has_content_type() const;
  inline void clear_content_type();
  static const int kContentTypeFieldNumber = 5;
  inline ::google::protobuf::uint32 content_type() const;
  inline void set_content_type(::google::protobuf::uint32 value);

  // required string playload = 6;
  inline bool has_playload() const;
  inline void clear_playload();
  static const int kPlayloadFieldNumber = 6;
  inline const ::std::string& playload() const;
  inline void set_playload(const ::std::string& value);
  inline void set_playload(const char* value);
  inline void set_playload(const char* value, size_t size);
  inline ::std::string* mutable_playload();
  inline ::std::string* release_playload();
  inline void set_allocated_playload(::std::string* playload);

  // @@protoc_insertion_point(class_scope:pb.CS2C_UserMessage)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_display_name();
  inline void clear_has_display_name();
  inline void set_has_datetime();
  inline void clear_has_datetime();
  inline void set_has_content_type();
  inline void clear_has_content_type();
  inline void set_has_playload();
  inline void clear_has_playload();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 user_id_;
  ::std::string* display_name_;
  ::google::protobuf::uint32 datetime_;
  ::google::protobuf::uint32 content_type_;
  ::std::string* playload_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_ChatService_2eproto();
  friend void protobuf_AssignDesc_ChatService_2eproto();
  friend void protobuf_ShutdownFile_ChatService_2eproto();

  void InitAsDefaultInstance();
  static CS2C_UserMessage* default_instance_;
};
// -------------------------------------------------------------------

class CS2C_UnknowError : public ::google::protobuf::Message {
 public:
  CS2C_UnknowError();
  virtual ~CS2C_UnknowError();

  CS2C_UnknowError(const CS2C_UnknowError& from);

  inline CS2C_UnknowError& operator=(const CS2C_UnknowError& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CS2C_UnknowError& default_instance();

  void Swap(CS2C_UnknowError* other);

  // implements Message ----------------------------------------------

  CS2C_UnknowError* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CS2C_UnknowError& from);
  void MergeFrom(const CS2C_UnknowError& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 code() const;
  inline void set_code(::google::protobuf::uint32 value);

  // required string message = 2;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 2;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:pb.CS2C_UnknowError)
 private:
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_message();
  inline void clear_has_message();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* message_;
  ::google::protobuf::uint32 code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ChatService_2eproto();
  friend void protobuf_AssignDesc_ChatService_2eproto();
  friend void protobuf_ShutdownFile_ChatService_2eproto();

  void InitAsDefaultInstance();
  static CS2C_UnknowError* default_instance_;
};
// ===================================================================


// ===================================================================

// C2CS_EnterROOM

// required string token = 1;
inline bool C2CS_EnterROOM::has_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2CS_EnterROOM::set_has_token() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2CS_EnterROOM::clear_has_token() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2CS_EnterROOM::clear_token() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& C2CS_EnterROOM::token() const {
  return *token_;
}
inline void C2CS_EnterROOM::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void C2CS_EnterROOM::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void C2CS_EnterROOM::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* C2CS_EnterROOM::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  return token_;
}
inline ::std::string* C2CS_EnterROOM::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void C2CS_EnterROOM::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 room_id = 2;
inline bool C2CS_EnterROOM::has_room_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void C2CS_EnterROOM::set_has_room_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void C2CS_EnterROOM::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void C2CS_EnterROOM::clear_room_id() {
  room_id_ = 0u;
  clear_has_room_id();
}
inline ::google::protobuf::uint32 C2CS_EnterROOM::room_id() const {
  return room_id_;
}
inline void C2CS_EnterROOM::set_room_id(::google::protobuf::uint32 value) {
  set_has_room_id();
  room_id_ = value;
}

// -------------------------------------------------------------------

// C2CS_LeaveROOM

// required string token = 1;
inline bool C2CS_LeaveROOM::has_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2CS_LeaveROOM::set_has_token() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2CS_LeaveROOM::clear_has_token() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2CS_LeaveROOM::clear_token() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& C2CS_LeaveROOM::token() const {
  return *token_;
}
inline void C2CS_LeaveROOM::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void C2CS_LeaveROOM::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void C2CS_LeaveROOM::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* C2CS_LeaveROOM::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  return token_;
}
inline ::std::string* C2CS_LeaveROOM::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void C2CS_LeaveROOM::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 room_id = 2;
inline bool C2CS_LeaveROOM::has_room_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void C2CS_LeaveROOM::set_has_room_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void C2CS_LeaveROOM::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void C2CS_LeaveROOM::clear_room_id() {
  room_id_ = 0u;
  clear_has_room_id();
}
inline ::google::protobuf::uint32 C2CS_LeaveROOM::room_id() const {
  return room_id_;
}
inline void C2CS_LeaveROOM::set_room_id(::google::protobuf::uint32 value) {
  set_has_room_id();
  room_id_ = value;
}

// -------------------------------------------------------------------

// C2CS_UserMessage

// required uint32 type = 1;
inline bool C2CS_UserMessage::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2CS_UserMessage::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2CS_UserMessage::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2CS_UserMessage::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 C2CS_UserMessage::type() const {
  return type_;
}
inline void C2CS_UserMessage::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// required uint32 content_type = 2;
inline bool C2CS_UserMessage::has_content_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void C2CS_UserMessage::set_has_content_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void C2CS_UserMessage::clear_has_content_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void C2CS_UserMessage::clear_content_type() {
  content_type_ = 0u;
  clear_has_content_type();
}
inline ::google::protobuf::uint32 C2CS_UserMessage::content_type() const {
  return content_type_;
}
inline void C2CS_UserMessage::set_content_type(::google::protobuf::uint32 value) {
  set_has_content_type();
  content_type_ = value;
}

// required string playload = 3;
inline bool C2CS_UserMessage::has_playload() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void C2CS_UserMessage::set_has_playload() {
  _has_bits_[0] |= 0x00000004u;
}
inline void C2CS_UserMessage::clear_has_playload() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void C2CS_UserMessage::clear_playload() {
  if (playload_ != &::google::protobuf::internal::kEmptyString) {
    playload_->clear();
  }
  clear_has_playload();
}
inline const ::std::string& C2CS_UserMessage::playload() const {
  return *playload_;
}
inline void C2CS_UserMessage::set_playload(const ::std::string& value) {
  set_has_playload();
  if (playload_ == &::google::protobuf::internal::kEmptyString) {
    playload_ = new ::std::string;
  }
  playload_->assign(value);
}
inline void C2CS_UserMessage::set_playload(const char* value) {
  set_has_playload();
  if (playload_ == &::google::protobuf::internal::kEmptyString) {
    playload_ = new ::std::string;
  }
  playload_->assign(value);
}
inline void C2CS_UserMessage::set_playload(const char* value, size_t size) {
  set_has_playload();
  if (playload_ == &::google::protobuf::internal::kEmptyString) {
    playload_ = new ::std::string;
  }
  playload_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* C2CS_UserMessage::mutable_playload() {
  set_has_playload();
  if (playload_ == &::google::protobuf::internal::kEmptyString) {
    playload_ = new ::std::string;
  }
  return playload_;
}
inline ::std::string* C2CS_UserMessage::release_playload() {
  clear_has_playload();
  if (playload_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = playload_;
    playload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void C2CS_UserMessage::set_allocated_playload(::std::string* playload) {
  if (playload_ != &::google::protobuf::internal::kEmptyString) {
    delete playload_;
  }
  if (playload) {
    set_has_playload();
    playload_ = playload;
  } else {
    clear_has_playload();
    playload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CS2C_UserMessage

// required uint32 type = 1;
inline bool CS2C_UserMessage::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CS2C_UserMessage::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CS2C_UserMessage::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CS2C_UserMessage::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 CS2C_UserMessage::type() const {
  return type_;
}
inline void CS2C_UserMessage::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// required uint32 user_id = 2;
inline bool CS2C_UserMessage::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CS2C_UserMessage::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CS2C_UserMessage::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CS2C_UserMessage::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 CS2C_UserMessage::user_id() const {
  return user_id_;
}
inline void CS2C_UserMessage::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
}

// required string display_name = 3;
inline bool CS2C_UserMessage::has_display_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CS2C_UserMessage::set_has_display_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CS2C_UserMessage::clear_has_display_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CS2C_UserMessage::clear_display_name() {
  if (display_name_ != &::google::protobuf::internal::kEmptyString) {
    display_name_->clear();
  }
  clear_has_display_name();
}
inline const ::std::string& CS2C_UserMessage::display_name() const {
  return *display_name_;
}
inline void CS2C_UserMessage::set_display_name(const ::std::string& value) {
  set_has_display_name();
  if (display_name_ == &::google::protobuf::internal::kEmptyString) {
    display_name_ = new ::std::string;
  }
  display_name_->assign(value);
}
inline void CS2C_UserMessage::set_display_name(const char* value) {
  set_has_display_name();
  if (display_name_ == &::google::protobuf::internal::kEmptyString) {
    display_name_ = new ::std::string;
  }
  display_name_->assign(value);
}
inline void CS2C_UserMessage::set_display_name(const char* value, size_t size) {
  set_has_display_name();
  if (display_name_ == &::google::protobuf::internal::kEmptyString) {
    display_name_ = new ::std::string;
  }
  display_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CS2C_UserMessage::mutable_display_name() {
  set_has_display_name();
  if (display_name_ == &::google::protobuf::internal::kEmptyString) {
    display_name_ = new ::std::string;
  }
  return display_name_;
}
inline ::std::string* CS2C_UserMessage::release_display_name() {
  clear_has_display_name();
  if (display_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = display_name_;
    display_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CS2C_UserMessage::set_allocated_display_name(::std::string* display_name) {
  if (display_name_ != &::google::protobuf::internal::kEmptyString) {
    delete display_name_;
  }
  if (display_name) {
    set_has_display_name();
    display_name_ = display_name;
  } else {
    clear_has_display_name();
    display_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 datetime = 4;
inline bool CS2C_UserMessage::has_datetime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CS2C_UserMessage::set_has_datetime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CS2C_UserMessage::clear_has_datetime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CS2C_UserMessage::clear_datetime() {
  datetime_ = 0u;
  clear_has_datetime();
}
inline ::google::protobuf::uint32 CS2C_UserMessage::datetime() const {
  return datetime_;
}
inline void CS2C_UserMessage::set_datetime(::google::protobuf::uint32 value) {
  set_has_datetime();
  datetime_ = value;
}

// required uint32 content_type = 5;
inline bool CS2C_UserMessage::has_content_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CS2C_UserMessage::set_has_content_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CS2C_UserMessage::clear_has_content_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CS2C_UserMessage::clear_content_type() {
  content_type_ = 0u;
  clear_has_content_type();
}
inline ::google::protobuf::uint32 CS2C_UserMessage::content_type() const {
  return content_type_;
}
inline void CS2C_UserMessage::set_content_type(::google::protobuf::uint32 value) {
  set_has_content_type();
  content_type_ = value;
}

// required string playload = 6;
inline bool CS2C_UserMessage::has_playload() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CS2C_UserMessage::set_has_playload() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CS2C_UserMessage::clear_has_playload() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CS2C_UserMessage::clear_playload() {
  if (playload_ != &::google::protobuf::internal::kEmptyString) {
    playload_->clear();
  }
  clear_has_playload();
}
inline const ::std::string& CS2C_UserMessage::playload() const {
  return *playload_;
}
inline void CS2C_UserMessage::set_playload(const ::std::string& value) {
  set_has_playload();
  if (playload_ == &::google::protobuf::internal::kEmptyString) {
    playload_ = new ::std::string;
  }
  playload_->assign(value);
}
inline void CS2C_UserMessage::set_playload(const char* value) {
  set_has_playload();
  if (playload_ == &::google::protobuf::internal::kEmptyString) {
    playload_ = new ::std::string;
  }
  playload_->assign(value);
}
inline void CS2C_UserMessage::set_playload(const char* value, size_t size) {
  set_has_playload();
  if (playload_ == &::google::protobuf::internal::kEmptyString) {
    playload_ = new ::std::string;
  }
  playload_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CS2C_UserMessage::mutable_playload() {
  set_has_playload();
  if (playload_ == &::google::protobuf::internal::kEmptyString) {
    playload_ = new ::std::string;
  }
  return playload_;
}
inline ::std::string* CS2C_UserMessage::release_playload() {
  clear_has_playload();
  if (playload_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = playload_;
    playload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CS2C_UserMessage::set_allocated_playload(::std::string* playload) {
  if (playload_ != &::google::protobuf::internal::kEmptyString) {
    delete playload_;
  }
  if (playload) {
    set_has_playload();
    playload_ = playload;
  } else {
    clear_has_playload();
    playload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CS2C_UnknowError

// required uint32 code = 1;
inline bool CS2C_UnknowError::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CS2C_UnknowError::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CS2C_UnknowError::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CS2C_UnknowError::clear_code() {
  code_ = 0u;
  clear_has_code();
}
inline ::google::protobuf::uint32 CS2C_UnknowError::code() const {
  return code_;
}
inline void CS2C_UnknowError::set_code(::google::protobuf::uint32 value) {
  set_has_code();
  code_ = value;
}

// required string message = 2;
inline bool CS2C_UnknowError::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CS2C_UnknowError::set_has_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CS2C_UnknowError::clear_has_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CS2C_UnknowError::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& CS2C_UnknowError::message() const {
  return *message_;
}
inline void CS2C_UnknowError::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void CS2C_UnknowError::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void CS2C_UnknowError::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CS2C_UnknowError::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* CS2C_UnknowError::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CS2C_UnknowError::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ChatService_2eproto__INCLUDED
